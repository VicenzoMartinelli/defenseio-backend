// <auto-generated />
using System;
using DefenseIO.Services.Contracting.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DefenseIO.Services.Contracting.Data.Migrations
{
    [DbContext(typeof(ContractingContext))]
    [Migration("20191109174821_added-provider-fields")]
    partial class addedproviderfields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.AttendedModality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasicValue");

                    b.Property<string>("Method")
                        .IsRequired();

                    b.Property<Guid>("ModalityId");

                    b.Property<bool>("MultiplyByEmployeesNumber")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProviderUserId");

                    b.HasKey("Id");

                    b.HasIndex("ModalityId");

                    b.HasIndex("ProviderUserId");

                    b.ToTable("AttendedModality");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.Modality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(80);

                    b.Property<string>("Key")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Modality");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0dfb8c92-3bf7-4d13-aaf5-f9ced88a1ada"),
                            Description = "Segurança pessoal",
                            Key = "Personal"
                        },
                        new
                        {
                            Id = new Guid("5efd700b-97a2-47f2-aa9c-cbc025b474bc"),
                            Description = "Escolta armada",
                            Key = "ArmedEscort"
                        },
                        new
                        {
                            Id = new Guid("28be71dc-0c2c-4421-b796-41a47ca2726e"),
                            Description = "Transporte de valores",
                            Key = "ValuesTransportation"
                        },
                        new
                        {
                            Id = new Guid("ff29aaca-5574-499b-8d47-883c8f4883cf"),
                            Description = "Segurança patrimonial",
                            Key = "AssetSurveillance"
                        });
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.Solicitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttendedModalityId");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<double>("FinalCost");

                    b.Property<double?>("KiloMeters");

                    b.Property<int>("ModalityType");

                    b.Property<int?>("NumberOfEmployeers");

                    b.Property<Guid>("ProviderId");

                    b.Property<string>("Remark")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("SolicitationDate");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("Status");

                    b.Property<TimeSpan?>("TurnOver");

                    b.Property<TimeSpan?>("TurnStart");

                    b.HasKey("Id");

                    b.HasIndex("AttendedModalityId");

                    b.ToTable("Solicitation");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.SolicitationEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<double>("EfficiencyGrade");

                    b.Property<DateTime>("EvaluationDate");

                    b.Property<double>("ExperienceGrade");

                    b.Property<Guid>("ProviderId");

                    b.Property<Guid>("SolicitationId");

                    b.Property<double>("SpeedGrade");

                    b.HasKey("Id");

                    b.HasIndex("SolicitationId")
                        .IsUnique();

                    b.ToTable("SolicitationEvaluation");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Geographic.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DistrictId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Geographic.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Initials");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Users.ProviderUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrazilianInscricaoEstadual")
                        .HasMaxLength(15);

                    b.Property<DateTime>("LicenseValidity");

                    b.HasKey("UserId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.AttendedModality", b =>
                {
                    b.HasOne("DefenseIO.Domain.Domains.Contracting.Entities.Modality", "Modality")
                        .WithMany()
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.Solicitation", b =>
                {
                    b.HasOne("DefenseIO.Domain.Domains.Contracting.Entities.AttendedModality", "AttendedModality")
                        .WithMany()
                        .HasForeignKey("AttendedModalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DefenseIO.Domain.Domains.Users.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SolicitationId");

                            b1.Property<string>("Address");

                            b1.Property<string>("AddressNumber");

                            b1.Property<string>("Burgh");

                            b1.Property<string>("Cep");

                            b1.Property<Guid>("CityId");

                            b1.Property<string>("Complement");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.HasKey("SolicitationId");

                            b1.HasIndex("CityId");

                            b1.ToTable("Solicitation");

                            b1.HasOne("DefenseIO.Domain.Domains.Geographic.City", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.Solicitation")
                                .WithOne("Location")
                                .HasForeignKey("DefenseIO.Domain.Domains.Users.Location", "SolicitationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.SolicitationEvaluation", b =>
                {
                    b.HasOne("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.Solicitation", "Solicitation")
                        .WithOne("Evaluation")
                        .HasForeignKey("DefenseIO.Domain.Domains.Contracting.Entities.Solicitation.SolicitationEvaluation", "SolicitationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Geographic.City", b =>
                {
                    b.HasOne("DefenseIO.Domain.Domains.Geographic.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefenseIO.Domain.Domains.Users.ProviderUser", b =>
                {
                    b.OwnsOne("DefenseIO.Domain.Domains.Users.User", "User", b1 =>
                        {
                            b1.Property<Guid>("ProviderUserId");

                            b1.Property<int>("AccessFailedCount");

                            b1.Property<bool>("Active")
                                .ValueGeneratedOnAdd()
                                .HasDefaultValue(true);

                            b1.Property<string>("ConcurrencyStamp");

                            b1.Property<string>("DocumentIdentifier");

                            b1.Property<string>("Email");

                            b1.Property<bool>("EmailConfirmed");

                            b1.Property<Guid>("Id");

                            b1.Property<DateTime?>("LastPasswordReset");

                            b1.Property<bool>("LockoutEnabled");

                            b1.Property<DateTimeOffset?>("LockoutEnd");

                            b1.Property<string>("Name")
                                .HasMaxLength(160);

                            b1.Property<string>("NormalizedEmail");

                            b1.Property<string>("NormalizedUserName");

                            b1.Property<string>("PasswordHash");

                            b1.Property<string>("PhoneNumber");

                            b1.Property<bool>("PhoneNumberConfirmed");

                            b1.Property<string>("SecurityStamp");

                            b1.Property<bool>("TwoFactorEnabled");

                            b1.Property<int>("Type");

                            b1.Property<string>("UserName");

                            b1.HasKey("ProviderUserId");

                            b1.ToTable("Provider");

                            b1.HasOne("DefenseIO.Domain.Domains.Users.ProviderUser", "Provider")
                                .WithOne("User")
                                .HasForeignKey("DefenseIO.Domain.Domains.Users.User", "ProviderUserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("DefenseIO.Domain.Domains.Users.Location", "PrimaryLocation", b2 =>
                                {
                                    b2.Property<Guid>("UserProviderUserId");

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasMaxLength(80);

                                    b2.Property<string>("AddressNumber")
                                        .HasMaxLength(8);

                                    b2.Property<string>("Burgh")
                                        .IsRequired()
                                        .HasMaxLength(80);

                                    b2.Property<string>("Cep")
                                        .IsRequired()
                                        .HasMaxLength(15);

                                    b2.Property<Guid>("CityId");

                                    b2.Property<string>("Complement")
                                        .HasMaxLength(60);

                                    b2.Property<double>("Latitude");

                                    b2.Property<double>("Longitude");

                                    b2.HasKey("UserProviderUserId");

                                    b2.HasIndex("CityId");

                                    b2.ToTable("Provider");

                                    b2.HasOne("DefenseIO.Domain.Domains.Geographic.City", "City")
                                        .WithMany()
                                        .HasForeignKey("CityId")
                                        .OnDelete(DeleteBehavior.Cascade);

                                    b2.HasOne("DefenseIO.Domain.Domains.Users.User")
                                        .WithOne("PrimaryLocation")
                                        .HasForeignKey("DefenseIO.Domain.Domains.Users.Location", "UserProviderUserId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
